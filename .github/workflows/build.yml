name: Build

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  release:
    types: [created]

jobs:
  build-api:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-north-1
      DOTNET_LAMBDA_S3_LOCATION: sponsorkit-lambda-deploy-packages
      DOTNET_API_LAMBDA_PACKAGE_NAME: ${{ github.sha }}.zip
      DOTNET_API_LAMBDA_FUNCTION_NAME: sponsorkit
      DOTNET_API_LAMBDA_FUNCTION_HANDLER: Sponsorkit.Api
      DOTNET_JOB_LAMBDA_PACKAGE_NAME: ${{ github.sha }}-job.zip
      DOTNET_JOB_LAMBDA_FUNCTION_NAME: sponsorkit-job
      DOTNET_JOB_LAMBDA_FUNCTION_HANDLER: Sponsorkit.Jobs
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
    container:
      image: ubuntu
      options: --privileged
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
    - uses: n1hility/cancel-previous-runs@178b93a12fb2731212e48c2cc5b7e37b937fd339
      with: 
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout Github Action
      uses: actions/checkout@master

    - name: Install CURL
      run: apt-get update && apt-get install -y curl
      
    - name: Install Docker
      run: |
        curl -fsSL https://get.docker.com | sh
        dockerd &

    - name: Use proper .NET version
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
      
    - name: Run tests
      run: dotnet test

    - name: Install AWS .NET CLI
      run: dotnet tool install -g Amazon.Lambda.Tools

    - name: .NET Lambda build and upload to S3 (API)
      working-directory: src/backend/Sponsorkit.Api
      run: |
        dotnet lambda package $DOTNET_API_LAMBDA_PACKAGE_NAME
        aws s3 cp --only-show-errors $DOTNET_API_LAMBDA_PACKAGE_NAME s3://$DOTNET_LAMBDA_S3_LOCATION/$DOTNET_API_LAMBDA_PACKAGE_NAME

    - name: .NET Lambda build and upload to S3 (Jobs)
      working-directory: src/backend/Sponsorkit.Jobs
      run: |
        dotnet lambda package $DOTNET_JOB_LAMBDA_PACKAGE_NAME
        aws s3 cp --only-show-errors $DOTNET_JOB_LAMBDA_PACKAGE_NAME s3://$DOTNET_LAMBDA_S3_LOCATION/$DOTNET_JOB_LAMBDA_PACKAGE_NAME

    - name: Deploy to staging (API)
      working-directory: src/backend/Sponsorkit.Api
      if: github.event_name != 'release' || github.event.action != 'created'
      run: |
        dotnet lambda deploy-function \
          --region $AWS_REGION \
          --function-name $DOTNET_API_LAMBDA_FUNCTION_NAME-staging \
          --function-handler $DOTNET_API_LAMBDA_FUNCTION_HANDLER \
          --package $DOTNET_API_LAMBDA_PACKAGE_NAME

    - name: Deploy to staging (Jobs)
      working-directory: src/backend/Sponsorkit.Jobs
      if: github.event_name != 'release' || github.event.action != 'created'
      run: |
        dotnet lambda deploy-function \
          --region $AWS_REGION \
          --function-name $DOTNET_JOB_LAMBDA_FUNCTION_NAME-staging \
          --function-handler $DOTNET_JOB_LAMBDA_FUNCTION_HANDLER \
          --package $DOTNET_JOB_LAMBDA_PACKAGE_NAME
          
    - name: Deploy to production (API)
      working-directory: src/backend/Sponsorkit.Api
      if: github.event_name == 'release' && github.event.action == 'created'
      run: |
        dotnet lambda deploy-function \
          --region $AWS_REGION \
          --function-name $DOTNET_API_LAMBDA_FUNCTION_NAME-production \
          --function-handler $DOTNET_API_LAMBDA_FUNCTION_HANDLER \
          --package $DOTNET_API_LAMBDA_PACKAGE_NAME

    - name: Deploy to production (Jobs)
      working-directory: src/backend/Sponsorkit.Jobs
      if: github.event_name == 'release' && github.event.action == 'created'
      run: | 
        dotnet lambda deploy-function \
          --region $AWS_REGION \
          --function-name $DOTNET_JOB_LAMBDA_FUNCTION_NAME-production \
          --function-handler $DOTNET_JOB_LAMBDA_FUNCTION_HANDLER \
          --package $DOTNET_JOB_LAMBDA_PACKAGE_NAME
