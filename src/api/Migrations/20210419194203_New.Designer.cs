// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sponsorkit.Domain.Models;

namespace Sponsorkit.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210419194203_New")]
    partial class New
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sponsorkit.Domain.Models.Bounty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountInHundreds")
                        .HasColumnType("int");

                    b.Property<Guid>("AwardedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AwardedToId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IssueId");

                    b.ToTable("Bounties");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EncryptedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GitHubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountInHundreds")
                        .HasColumnType("int");

                    b.Property<Guid?>("BountyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SponsorshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StripeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BountyId")
                        .IsUnique()
                        .HasFilter("[BountyId] IS NOT NULL");

                    b.HasIndex("SponsorshipId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1561c526-28ff-464a-a5a4-262d35683bf8"),
                            AmountInHundreds = 100,
                            CreatedAtUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SponsorshipId = new Guid("0d1037c3-2134-47a6-a31f-a9a68f4270b6"),
                            StripeId = "foo"
                        },
                        new
                        {
                            Id = new Guid("4ae7be1e-3479-4d67-bba0-081841e36a4a"),
                            AmountInHundreds = 250,
                            CreatedAtUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SponsorshipId = new Guid("0d1037c3-2134-47a6-a31f-a9a68f4270b6"),
                            StripeId = "foo"
                        });
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("GitHubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Sponsorship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeneficiaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MonthlyAmountInHundreds")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RepositoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("SponsorId");

                    b.ToTable("Sponsorships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d1037c3-2134-47a6-a31f-a9a68f4270b6"),
                            BeneficiaryId = new Guid("681c2d58-7a3f-49fb-ada8-697c06708d32"),
                            CreatedAtUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reference = "sponsorship-foo",
                            SponsorId = new Guid("968ab86b-996f-4475-b277-fab13a3984d0")
                        });
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("GitHubId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("681c2d58-7a3f-49fb-ada8-697c06708d32"),
                            CreatedAtUtc = new DateTime(2021, 4, 19, 19, 42, 3, 230, DateTimeKind.Utc).AddTicks(1264),
                            GitHubId = "ffMathy",
                            Name = "the-beneficiary",
                            StripeId = "foo"
                        },
                        new
                        {
                            Id = new Guid("968ab86b-996f-4475-b277-fab13a3984d0"),
                            CreatedAtUtc = new DateTime(2021, 4, 19, 19, 42, 3, 230, DateTimeKind.Utc).AddTicks(1926),
                            Name = "the-sponsor",
                            StripeId = "foo"
                        });
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Bounty", b =>
                {
                    b.HasOne("Sponsorkit.Domain.Models.User", "AwardedTo")
                        .WithMany("AwardedBounties")
                        .HasForeignKey("AwardedToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sponsorkit.Domain.Models.User", "Creator")
                        .WithMany("CreatedBounties")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sponsorkit.Domain.Models.Issue", "Issue")
                        .WithMany("Bounties")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwardedTo");

                    b.Navigation("Creator");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Identity", b =>
                {
                    b.HasOne("Sponsorkit.Domain.Models.User", "Owner")
                        .WithMany("Identities")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Issue", b =>
                {
                    b.HasOne("Sponsorkit.Domain.Models.Repository", "Repository")
                        .WithMany("Issues")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Payment", b =>
                {
                    b.HasOne("Sponsorkit.Domain.Models.Bounty", "Bounty")
                        .WithOne("Payment")
                        .HasForeignKey("Sponsorkit.Domain.Models.Payment", "BountyId");

                    b.HasOne("Sponsorkit.Domain.Models.Sponsorship", "Sponsorship")
                        .WithMany("Payments")
                        .HasForeignKey("SponsorshipId");

                    b.Navigation("Bounty");

                    b.Navigation("Sponsorship");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Repository", b =>
                {
                    b.HasOne("Sponsorkit.Domain.Models.User", "Owner")
                        .WithMany("Repositories")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Sponsorship", b =>
                {
                    b.HasOne("Sponsorkit.Domain.Models.User", "Beneficiary")
                        .WithMany("AwardedSponsorships")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sponsorkit.Domain.Models.Repository", "Repository")
                        .WithMany("Sponsorships")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sponsorkit.Domain.Models.User", "Sponsor")
                        .WithMany("CreatedSponsorships")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("Repository");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Bounty", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Issue", b =>
                {
                    b.Navigation("Bounties");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Repository", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Sponsorships");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.Sponsorship", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Sponsorkit.Domain.Models.User", b =>
                {
                    b.Navigation("AwardedBounties");

                    b.Navigation("AwardedSponsorships");

                    b.Navigation("CreatedBounties");

                    b.Navigation("CreatedSponsorships");

                    b.Navigation("Identities");

                    b.Navigation("Repositories");
                });
#pragma warning restore 612, 618
        }
    }
}
